import java.util.Arrays;

public class Player {
    private int playerNumber;
    private int deckNum;
    private Card[] playerHandArray;
    private Card[] playerDeckArray;

    public Player(int PlayerNumber, int deckNum) { //parse the deck num through
        this.playerNumber = PlayerNumber;
        this.deckNum = deckNum;
        this.playerHandArray = new Card[4]; //0 to 4 where 4 is the add/remove hand
        this.playerDeckArray = new Card[deckNum];
    }
    //Following code checks if a player has won
    public boolean checkWin() {
        boolean playerWin = true;
        //Gathers together card values
        int[] cardNumbers = new int[4];
        for (int eachCard = 0; eachCard < playerHandArray.length; eachCard++) {
            cardNumbers[eachCard] = playerHandArray[eachCard].getIndexValue();
        }

        //Checking if the card values are the same
        int comparisonValue = cardNumbers[0];
        for (int eachValue = 1; eachValue < cardNumbers.length; eachValue++) {
            if (comparisonValue != cardNumbers[eachValue]) {
                playerWin = false;
                break;
            }
        }
        return playerWin;
    }

    public  int getPlayerNumber() {
        return playerNumber;
    }

    public int getDeckNum(){
        return deckNum;
    }

    public Card[] getPlayerHandArray() {
        return playerHandArray;
    }

    public Card[] getPlayerDeckArray() {
        return playerDeckArray;
    }

    public void discard(){
        Card[] playerHandArray = getPlayerHandArray();
        int[] tempArray = new int[4];
        Card [] keepArray = new Card[4];
        Card [] discardArray = new Card[4];
        for (int i = 0; i < playerHandArray.length; i++) {
            tempArray[i] = playerHandArray[i].getIndexValue();
        }
        Arrays.sort(tempArray);
        int moreVal = 1;
        int tempValue;
        int winingVal = tempArray[0];
        for (int i = 0; i < (tempArray.length); i++) {
            int count = 1;
            tempValue = tempArray[i];
            System.out.println("We have: " + tempValue);
            for (int j = i+1; j < tempArray.length; j++) {
                int againstVal = tempArray[j];
                if (tempValue == againstVal) {
                    count++;
                    System.out.println("Another found" + againstVal);
                }
            }if(count > moreVal){
                winingVal = playerHandArray[i].getIndexValue();
                moreVal = count;
            }


        }

    }

    public void discardCard(){
        //Find card numbers that doesnt repeat
        Card[] playerCards = getPlayerHandArray();
        int count = 0;
        Card[] nonRepeatingCards = new Card[4];
        for (int i = 0; i < 4; i++){
            int j;
            for (j = 0; j < 4; j++){
                int firstValue = playerCards[i].getIndexValue();
                int secondValue = playerCards[i].getIndexValue();
                if(i != j && firstValue == secondValue){
                    break;
                }
            }
            if (j == 4){
                nonRepeatingCards[count] = playerCards[i];
                count++;
            }
        }
        if(nonRepeatingCards == null) {
            int thisValue = 0;
            int playerNum = playerNumber;
            for (int i = 0; i < playerHandArray.length; i++) {
                if (playerNum == playerHandArray[i].getIndexValue()) {
                    thisValue = playerHandArray[i].getIndexValue();
                }
            }
        }

        //Out of those cards pick card that has highest time step
        Card currentMax = nonRepeatingCards[0];
        for (int eachCard = 1; eachCard < 4; eachCard++){
            int thisTimeStep = nonRepeatingCards[eachCard].getTimeStep();
            if(thisTimeStep > currentMax.getIndexValue()){
                currentMax = nonRepeatingCards[eachCard];
            }
        }

        //Removing Card

    }

}
// for (int i = 0; i < 4; i++) {
//            Card[] playerHand = playerArray[].getPlayerHandArray();
//            System.out.println(playerHand[i].getIndexValue());
//
//        }
//        System.out.println("Deck");
//        for (int i = 0; i < 2*playerAmount-4; i++) {
//            Card[] playerDeck = playerArray[1].getPlayerDeckArray();
//            System.out.println(playerDeck[i].getIndexValue());
//        }
//int thisDifference = 0;
//            Card possibleHighest = playerHandArray[0];
//            int currentHighestDifference = playerNumber - playerHandArray[0].getIndexValue();
//            for (int q = 0; q <playerHandArray.length; q++) {
//                int thisValue= playerHandArray[q].getIndexValue();
//                if(thisValue <= playerNumber){
//                    thisDifference = playerNumber - thisValue;
//                }
//                else{
//                    thisDifference = thisValue = playerNumber;
//                }
//                if (thisDifference > currentHighestDifference){
//                    possibleHighest = playerHandArray[q];
//                }
//            }
//        }
