import java.io.*;
import java.util.Queue;
import java.util.Random;
import java.io.File;  // Import the File class

public class Pack {
    private static Card[] GameDeck;
    public String packName;
    public Integer playerNum;

    public Pack(String filename, int playerNumber) {
        this.packName = filename;
        this.playerNum = playerNumber;
        GameDeck = new Card[playerNum*8];
    }

    public static void writePlayers(int playerNumber, int pickedCard, int playerPickUp, int discardCard, int playerDiscardDeck) throws IOException {
        String filename = "player" + playerNumber + "output.txt";
        File myObj = new File(filename);
        if (myObj.exists()) {
            FileWriter fr = new FileWriter(myObj, true);
            BufferedWriter br = new BufferedWriter(fr);
            br.write("Player " + playerNumber + " picked up " + pickedCard
                    + " from player " + playerPickUp + " and discarded " + discardCard
                    + " to player " + playerDiscardDeck);
            br.newLine();
            br.close();
            fr.close();
        } else {
            try {
                FileWriter writePack = new FileWriter(filename);
                BufferedWriter bw = new BufferedWriter(writePack);
                bw.write("Player " + playerNumber + " picked up " + pickedCard
                        + " from player " + playerPickUp + " and discarded " + discardCard
                        + " to player " + playerDiscardDeck);
                bw.newLine();
                bw.close();
                writePack.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }

    public static void playerFileCheck(int playerNum) throws IOException {
        String filename = "player" + playerNum + "output.txt";
        File myObj = new File(filename);
        if (myObj.exists()) {
            PrintWriter writer = new PrintWriter(myObj);
            writer.print("");
            writer.close();
        } else {
            myObj.createNewFile();
        }
    }

    public static void winnerWrite(int playerNumber, Card[] playerHandArray) {
        String filename = "player" + playerNumber + "output.txt";
        File myObj = new File(filename);
        try {
            FileWriter fr = new FileWriter(myObj, true);
            BufferedWriter br = new BufferedWriter(fr);
            br.write("player " + playerNumber + " final hand: " );
            for (Card card : playerHandArray) {
                br.write(card.getIndexValue() + " ");
            }
            br.newLine();
            br.close();
            fr.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public static void writeLoser(int playerNumber, int winningPlayer, Card[] playerHandArray) {
        String filename = "player" + playerNumber + "output.txt";
        File myObj = new File(filename);
        try {
            FileWriter fr = new FileWriter(myObj, true);
            BufferedWriter br = new BufferedWriter(fr);
            br.write("player " + winningPlayer + " has informed player " + playerNumber + " they have won."+ " Players final hand: " );
            for (Card card : playerHandArray) {
                br.write(card.getIndexValue() + " ");
            }
            br.newLine();
            br.close();
            fr.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public static void deckWrite(int playerNumber, Queue<Card> deck) throws IOException {
        String fileName = "Deck_" + playerNumber + ".txt";
        File fileLocation = new File(fileName);
        if (fileLocation.exists()){
            FileWriter fileDrawer = new FileWriter(fileLocation);
            BufferedWriter myWriter = new BufferedWriter(fileDrawer);
            myWriter.write("Player  " + playerNumber + " final Deck: ");
            for(Card s : deck) {
                myWriter.write(s.getIndexValue() + " ");
            }
            myWriter.close();
            fileDrawer.close();
        }else {
            fileLocation.createNewFile();
            FileWriter fileDrawer = new FileWriter(fileLocation);
            BufferedWriter myWriter = new BufferedWriter(fileDrawer);
            myWriter.write("Player:  " + playerNumber + "Final Deck: ");
            for(Card s : deck) {
                myWriter.write(s.getIndexValue() + " ");
            }
            myWriter.close();
            fileDrawer.close();
        }
    }

    public void fileCheck(String fileName, int playerCount) throws IOException {
        File myObj = new File(fileName + ".txt");
        if (myObj.exists()) {
            System.out.println("File found");
            readPack(fileName);
        } else {
            System.out.println("File created: " + myObj.getName());
            writePack(playerCount);
        }
    }

    public Card[] shuffleArray(Card[] packArray) {

        Random rand = new Random();
        for (int i = 0; i < packArray.length; i++) {
            int randomIndexToSwap = rand.nextInt(packArray.length);
            Card temp = packArray[randomIndexToSwap];
            packArray[randomIndexToSwap] = packArray[i];
            packArray[i] = temp;
        }
        return packArray;
    }


    public void writePack(int n) {
        int cardNum = 8 * n;
        int deckNum = 2 * n;
        Card[] packArray = new Card[cardNum];
        int arraySection = 0;
        for (int i = 0; i < 4; i++) {
            for (int j = 1; j < deckNum + 1; j++) {
                packArray[arraySection] = new Card(j);
                arraySection++;
            }
        }
        try {
            FileWriter writePack = new FileWriter(packName + ".txt");
            BufferedWriter bw = new BufferedWriter(writePack);

            Card[] pack = shuffleArray(packArray);
            for (Card card : pack) {
                int a = card.getIndexValue();
                bw.write(String.valueOf(a));
                bw.newLine();
            }
            bw.close();
            writePack.close();
            System.out.println("Successfully wrote to the file.");
        } catch (IOException e) {
            System.out.println("An error occurred.");
            e.printStackTrace();
        }
    }

    public void readPack(String filenameRead) {
        try {
            File packFile = new File(filenameRead + ".txt");
            BufferedReader br = new BufferedReader(new FileReader(packFile));
            String st;
            int count = 0;
            while ((st = br.readLine()) != null) {
                GameDeck[count] = new Card(Integer.parseInt(st));
                count++;
            }
        } catch (IOException e) {
            e.printStackTrace();

        }
        GameDeck = shuffleArray(GameDeck);
    }

    public static Card[] getGameDeck() {
        return GameDeck;
    }
}
