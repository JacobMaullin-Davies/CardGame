public class Game{
    private int playerAmount;
    private Player[] playerArray;

    public Game(int playerAmount){
        this.playerAmount = playerAmount;
        this.playerArray = new Player[playerAmount];
        int count = 1;
        for (int i = 0; i < playerAmount; i++){
            playerArray[i] = new Player(count, (2*playerAmount-4), playerAmount,this);
            count++;

        }
        handOutCards();
        decideDecks();
    }

    public void play(){
        for (int i = 0; i < playerArray.length; i++) {
            playerArray[i].start();
        }
    }
    public void updateActualDeck(int playerIndex) {
        int playerPickUpIndex = 0;
        int playerDiscardDeckIndex = 0;
        if(playerIndex - 1 == 0){
                playerPickUpIndex = playerAmount-1;
            }
        if(playerIndex+1 > playerAmount){
                playerDiscardDeckIndex = 0;
            }
            Card[] changedDisDeck = playerArray[playerIndex].getDiscardDeck();
            playerArray[playerDiscardDeckIndex].newDeck(changedDisDeck);

            Card[] changedPickDeck = playerArray[playerIndex].getPickDeck();
            playerArray[playerPickUpIndex].newDeck(changedPickDeck);
    }



    public void decideDecks(){
        //Decide which decks the player will pick the card from
        int pickDeckNum;
        int discardDeckNum;
        for (int everyPlayer = 0; everyPlayer < playerAmount; everyPlayer++){
            pickDeckNum = everyPlayer-1;
            discardDeckNum =everyPlayer+1;
            if(pickDeckNum < 0){
                pickDeckNum = playerArray.length-1;
            }
            if(discardDeckNum > playerArray.length-1){
                discardDeckNum = 0;
            }
            Card[] pickDeck = playerArray[pickDeckNum].getPlayerDeckArray();
            playerArray[everyPlayer].setPickDeck(pickDeck);
            Card[] disDeck = playerArray[discardDeckNum].getPlayerDeckArray();
            playerArray[everyPlayer].setDiscardDeck(disDeck);
        }
    }

    public Player[] getPlayerArray() {
        return playerArray;
    }

    public void handOutCards() {
        Card[] allCards = Pack.getGameDeck();
        Player[] allPlayers = getPlayerArray();
        int count = 0;
        int tally = 0;
        int deckSize = 2 * playerAmount - 4;
        // Distributing to player's hands
        for (int arraySection = 0; arraySection < 4; arraySection++) {
            for (int eachPlayer = 0; eachPlayer < playerAmount; eachPlayer++) {
                Card[] thisPlayerHand = allPlayers[eachPlayer].getPlayerHandArray();
                thisPlayerHand[arraySection] = allCards[count];
                count++;
                tally++;
            }
        }
        //Distributing to player's decks

        for (int arraySection = 0; arraySection < deckSize; arraySection++) {
            for (int eachPlayer = 0; eachPlayer < playerAmount; eachPlayer++) {
                Card[] thisPlayerDeck = allPlayers[eachPlayer].getPlayerDeckArray();
                thisPlayerDeck[arraySection] = allCards[tally];
                tally++;
            }
        }
    }

//    public void displayOnInterface(int playerNumber){
//        System.out.println("Player: " + playerNumber);
//        Card[] playerHand = searchPlayer(playerNumber).getPlayerHandArray();
//        Card[] playerDeck = searchPlayer(playerNumber).getPlayerDeckArray();
//        System.out.println("Player Hand: ");
//        for (int j = 0; j < playerHand.length; j++) {
//            System.out.print(playerHand[j].getIndexValue() + " ");
//        }
//        System.out.println("");
//        System.out.println("Player Deck: ");
//        for (int i = 0; i < playerDeck.length; i++) {
//            System.out.print(playerDeck[i].getIndexValue() + " ");
//        }
//        System.out.println("");
//
//    }
//
//    public Player searchPlayer(int playerNumber){
//        Player interestedPlayer = null;
//        for (int everyPlayer = 0; everyPlayer < playerAmount; everyPlayer++){
//            int thisPlayerNumber = playerArray[everyPlayer].getPlayerNumber();
//            if (thisPlayerNumber == playerNumber){
//                interestedPlayer = playerArray[everyPlayer];
//            }
//        }
//        return interestedPlayer;
//    }
}
