public class Game {
    private int playerAmount;
    private Player[] playerArray;

    public Game(int playerAmount){
        this.playerAmount = playerAmount;
        this.playerArray = new Player[playerAmount];
        int count = 1;
        for (int i = 0; i < playerAmount; i++){
            playerArray[i] = new Player(count, (2*playerAmount-4));
            count++;
        }
    }

    public Player[] getPlayerArray() {
        return playerArray;
    }

    public void handOutCards() {
        Card[] allCards = Pack.getGameDeck();
        Player[] allPlayers = getPlayerArray();
        int count = 0;
        int tally = 0;
        int deckSize = 2 * playerAmount - 4;
        for (int arraySection = 0; arraySection < 4; arraySection++) {
            for (int eachPlayer = 0; eachPlayer < playerAmount; eachPlayer++) {
                Card[] thisPlayerHand = allPlayers[eachPlayer].getPlayerHandArray();
                thisPlayerHand[arraySection] = allCards[count];
                count++;
                tally++;
            }
        }

        for (int arraySection = 0; arraySection < deckSize; arraySection++) {
            for (int eachPlayer = 0; eachPlayer < playerAmount; eachPlayer++) {
                Card[] thisPlayerDeck = allPlayers[eachPlayer].getPlayerDeckArray();
                thisPlayerDeck[arraySection] = allCards[tally];
                tally++;
            }
        }

        for (int k = 0; k < 4; k++) {
            System.out.println("Player: " + playerArray[k].getPlayerNumber());
            Card[] playerHand = playerArray[k].getPlayerHandArray();
            Card[] playerDeck = playerArray[k].getPlayerDeckArray();
            System.out.println("Player Hand: ");
            for (int j = 0; j < 4; j++) {
                System.out.print(playerHand[j].getIndexValue() + " ");
            }
            System.out.println("");
            System.out.println("Player Deck: ");
            for (int i = 0; i < 2 * playerAmount - 4; i++) {
                System.out.print(playerDeck[i].getIndexValue() + " ");
            }
            System.out.println("");
        }
    }
    public Player searchPlayer(int playerNumber){
        Player interestedPlayer = null;
        for (int everyPlayer = 0; everyPlayer < playerAmount; everyPlayer++){
            int thisPlayerNumber = playerArray[everyPlayer].getPlayerNumber();
            if (thisPlayerNumber == playerNumber){
                interestedPlayer = playerArray[everyPlayer];
            }
        }
        return interestedPlayer;
    }

    public Card[] getPlayerGameHand(int playerNumber){
        Card[] specificHand = searchPlayer(playerNumber).getPlayerHandArray();
        return  specificHand;
    }
    public Card[] getPlayerGameDeck(int playerNumber){
        Card[] specificDeck = searchPlayer(playerNumber).getPlayerDeckArray();
        return specificDeck;
    }

    //Following code checks each player to see if there is a winner
    public void checkForWin(int playerNumber) {
        //Search for player with that playerNumber
        boolean winCheck = searchPlayer(playerNumber).checkWin();
        if (winCheck == true) {
            System.out.println("The player that has won is: " + playerNumber);
            //end game function call
        }
        searchPlayer(playerNumber).discard();
    }
}



//for (int everyPlayer = 0; everyPlayer < playerAmount; everyPlayer++) {
//            boolean winCheck = playerArray[everyPlayer].checkWin();
//            System.out.println(winCheck);
//            if (winCheck == true) {
//                System.out.println(playerArray[everyPlayer].getPlayerNumber() + "Has won");
//                //thread inform that player has won
//            }
//        }

//player	1 draws	a	4	from	deck	1
//        player	1 discards	a	3	to	deck	2
//        player	1 current	hand	is	1	1	2	4
