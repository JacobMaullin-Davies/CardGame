import java.io.IOException;

public class Game extends Thread{
    private final int playerAmount;
    private final Player[] playerArray;
    private final Deck [] deckArray;
    private boolean done;

    public Game(int playerAmount) throws IOException {
        this.playerAmount = playerAmount;
        this.playerArray = new Player[playerAmount];
        this.deckArray = new Deck[playerAmount];
        this.done = false;
        int count = 1;

        for (int i = 0; i < playerAmount; i++){
            playerArray[i] = new Player(count, playerAmount,this);
            deckArray[i] = new Deck(count);
            count++;
        }
        handOutCards();

        for (int i = 0; i < playerAmount; i++) {
            int pickDeckNum;
            int discardDeckNum;
            pickDeckNum = i - 1;
            discardDeckNum = i + 1;
            if (pickDeckNum < 0) {
                pickDeckNum = playerArray.length - 1;
            }
            if (discardDeckNum > playerArray.length - 1) {
                discardDeckNum = 0;
            }
            Deck topick = deckArray[pickDeckNum];
            Deck todis = deckArray[discardDeckNum];
            playerArray[i].setPickDeckForPlayer(topick);
            playerArray[i].setDiscardDeckForPlayer(todis);
        }
    }
    public boolean getDone(){
        return done;
    }
    public Player[] getPlayerArray() {
        return playerArray;
    }

    public void play() {
        System.out.println("Starting Game:: ");
        for (Player player : playerArray) {
            synchronized (this) {
                player.start();
            }
        }
    }

    public void notifyEnd(int winningPlayer) throws IOException {
        synchronized (this) {
            done = true;
            for (int i = 0; i < playerArray.length; i++) {
                playerArray[i].stopThread();
                if(playerArray[i].getPlayerNumber() != winningPlayer){
                    playerArray[i].writeLosers(winningPlayer);
                }
                Pack.deckWrite(playerArray[i].getPlayerNumber(), deckArray[i].getDeck());
            }
        }
    }

    public void handOutCards() {
        Card[] allCards = Pack.getGameDeck();
        Player[] allPlayers = getPlayerArray();
        int count = 0;
        int tally = 0;
        // Distributing to player's hands
        for (int arraySection = 0; arraySection < 4; arraySection++) {
            for (int eachPlayer = 0; eachPlayer < playerAmount; eachPlayer++) {
                Card[] thisPlayerHand = allPlayers[eachPlayer].getPlayerHandArray();
                thisPlayerHand[arraySection] = allCards[count];
                count++;
                tally++;
            }
        }
        //Distributing to player's decks in the deckArray
        for (int arraySection = 0; arraySection < 4; arraySection++) {
            for (int eachPlayer = 0; eachPlayer < playerAmount; eachPlayer++) {
                deckArray[eachPlayer].add(allCards[tally]);
                tally++;
            }
        }
    }
}

