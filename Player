import java.util.ArrayList;
import java.util.Arrays;
import java.util.Random;

public class Player extends Thread{
    private int playerNumber;
    private int deckNum;
    private Card[] playerHandArray;
    private Card[] playerDeckArray;
    private Card[] pickDeck;
    private Card[] discardDeck;
    private int playerAmount;
    private Game game;

    public Player(int PlayerNumber, int deckNum, int playerAmount, Game game) { //parse the deck num through
        this.game = game;
        this.playerNumber = PlayerNumber;
        this.deckNum = deckNum;
        this.playerHandArray = new Card[4]; //0 to 4 where 4 is the add/remove hand
        this.playerDeckArray = new Card[deckNum];
        this.playerAmount = playerAmount;
    }

    public int getPlayerNumber() {
        return playerNumber;
    }

    public Card[] getPlayerHandArray() {
        return playerHandArray;
    }

    public Card[] getPlayerDeckArray() {
        return playerDeckArray;
    }

    public Card[] getPickDeck() {
        return pickDeck;
    }

    public Card[] getDiscardDeck() {  return discardDeck;  }

    public void setPickDeck(Card[] pickDeck){ this.pickDeck = pickDeck;  }

    public void setDiscardDeck(Card[] discardDeck){
        this.discardDeck = discardDeck;
    }

    public void newDeck(Card[] newPickupDeck){
        this.playerDeckArray = newPickupDeck;
    }

    //This resets the hand so each card discard attribute is set to false
    public void resetHand() {
        for (int i = 0; i < playerHandArray.length; i++) {
            playerHandArray[i].setToKeep();
        }
    }

    @Override
    public void run() {
        //game.displayOnInterface(playerNumber); txt
        boolean win = checkWin();
        while (!win) {
            boolean playerNumExist = searchCardNumber(playerNumber);
            if (playerNumExist) {
                decideKeep();
            } else {
                decideDiscard();
            }
            int indexHand = findDiscardIndex();
            turn(indexHand);
            win = checkWin();
            game.updateActualDeck(playerNumber);
            game.decideDecks();
        }
        System.out.println("The player that has won is: " + playerNumber);
    }

    public void turn(int index){
        int playerPickUp = playerNumber - 1;
        int playerDiscardDeck = playerNumber + 1;
        if(playerPickUp == 0){
            playerPickUp = playerAmount;
        }
        if(playerDiscardDeck > playerAmount){
            playerDiscardDeck = 1;
        }
        resetHand();
        //resetCard to discard
        ArrayList<Card> newestPickup = new ArrayList();
        ArrayList<Card> newestDiscard = new ArrayList();
        Card cardUp = pickDeck[0];
        for (int i = 0; i < pickDeck.length; i++) {
                newestPickup.add(pickDeck[i]);
        }
        newestPickup.remove(0);

        Card[] newPickupDeck = new Card[newestPickup.size()];
        newPickupDeck = newestPickup.toArray(newPickupDeck);

        pickDeck = newPickupDeck;

        Card toDiscard = playerHandArray[index];
        playerHandArray[index] = cardUp;

        for (int i = 0; i < discardDeck.length; i++) {
            newestDiscard.add(discardDeck[i]);
        }
        newestDiscard.add(toDiscard);

        Card[] newDiscardDeck = new Card[newestDiscard.size()];
        newDiscardDeck = newestDiscard.toArray(newDiscardDeck);
        discardDeck = newDiscardDeck;


        System.out.println("Player " + playerNumber + " picked up " + cardUp.getIndexValue()
                + " from player " + playerPickUp +" and discarded " + toDiscard.getIndexValue()
                + " to player " + playerDiscardDeck);

    }

    //Following code checks if a player has won
    public boolean checkWin(){
    //Gathers together card values
        int[] cardNumbers = new int[4];
        for (int eachCard = 0; eachCard < playerHandArray.length; eachCard++) {
            cardNumbers[eachCard] = playerHandArray[eachCard].getIndexValue();
        }

        //Checking if the card values are the same
        int comparisonValue = cardNumbers[0];
        for (int eachValue = 1; eachValue < cardNumbers.length; eachValue++) {
            if (comparisonValue != cardNumbers[eachValue]) {
                return false;
            }
        }
        return true;
    }


    //Searches the hand of the player to find a certain card number
    public boolean searchCardNumber(int cardNumber) {
        for (int eachCard = 0; eachCard < playerHandArray.length; eachCard++) {
            int currentCardNum = playerHandArray[eachCard].getIndexValue();
            if (currentCardNum == cardNumber) {
                return true;
            }
        }
        return false;
    }
    //Finds card where the index is the player number and changes discard attribute
    public void decideKeep() {
        if (searchCardNumber(playerNumber) == true) {
            for (int g = 0; g < playerHandArray.length; g++) {
                int currentCardNum = playerHandArray[g].getIndexValue();
                if (currentCardNum == playerNumber) {
                    playerHandArray[g].setToKeep();
                } else {
                    playerHandArray[g].setToDiscard();
                }
            }
        }
    }


    public void decideDiscard(){
        Card[] playerHandArray = getPlayerHandArray();
        int[] tempArray = new int[4];
        for (int i = 0; i < playerHandArray.length; i++) {
            tempArray[i] = playerHandArray[i].getIndexValue();
        }
        Arrays.sort(tempArray);

        int cardNumAmount = 1;
        int tempValue;
        int winingVal = tempArray[0];
        int count = 0;
        for (int i = 0; i < (tempArray.length); i++) {
            count = 1;
            tempValue = tempArray[i];

            for (int j = i+1; j < tempArray.length; j++) {
                int againstVal = tempArray[j];
                if (tempValue == againstVal) {
                    count++;
                }
            }if(count > cardNumAmount) {
                winingVal = playerHandArray[i].getIndexValue();
                cardNumAmount = count;
            }

        }

        if(cardNumAmount > 1 ) {
            for (int i = 0; i < playerHandArray.length; i++) {
                if (winingVal == playerHandArray[i].getIndexValue()) {
                    playerHandArray[i].setToKeep();
                } else {
                    playerHandArray[i].setToDiscard();
                }
            }
        }
        else{
            for (int i = 0; i < playerHandArray.length; i++) {
                playerHandArray[i].setToDiscard();
            }
        }
    }



    //Returns index to which card should be removed from the players hand array
    public int findDiscardIndex(){
        ArrayList<Integer> removeIndexes = new ArrayList<Integer>();
        ArrayList<Integer> removePriorityIndex = new ArrayList<Integer>();
        for (int i = 0; i < playerHandArray.length; i++) {
            if(playerHandArray[i].getDiscard() == true){
                if(playerHandArray[i].getTimeStep() > 2){ /// 3 ?
                    removePriorityIndex.add(i);
                }else {
                    removeIndexes.add(i);
                }
            }
        }
        Random rand = new Random();
        int randomIndexToRemove = 0;
        int index = 0;
        int removePosition = 0;
        if(removePriorityIndex.size() > 0){
            randomIndexToRemove = rand.nextInt(removePriorityIndex.size());
            index = removePriorityIndex.get(randomIndexToRemove);
            removePosition = removePriorityIndex.indexOf(index);
            removePriorityIndex.remove(removePosition);
            for(int j = 0; j < removePriorityIndex.size(); j++) {
                for(int i = 0; i < playerHandArray.length; i++) {
                    if(removePriorityIndex.get(j) == i) {
                        playerHandArray[i].setTimeStep();
                    }
                }
            }
        }else {
            randomIndexToRemove = rand.nextInt(removeIndexes.size());
            index = removeIndexes.get(randomIndexToRemove);
            removePosition = removeIndexes.indexOf(index);
            removeIndexes.remove(removePosition);
            for(int j = 0; j < removeIndexes.size(); j++) {
                for(int i = 0; i < playerHandArray.length; i++) {
                    if(removeIndexes.get(j) == i) {
                        playerHandArray[i].setTimeStep();
                    }
                }
            }
        }
        return index;
    }
}
