import java.util.ArrayList;
import java.util.Arrays;
import java.util.Random;

public class Player {
    private int playerNumber;
    private int deckNum;
    private Card[] playerHandArray;
    private Card[] playerDeckArray;

    public Player(int PlayerNumber, int deckNum) { //parse the deck num through
        this.playerNumber = PlayerNumber;
        this.deckNum = deckNum;
        this.playerHandArray = new Card[4]; //0 to 4 where 4 is the add/remove hand
        this.playerDeckArray = new Card[deckNum];
    }

    public  int getPlayerNumber() {
        return playerNumber;
    }

    public int getDeckNum(){
        return deckNum;
    }

    public Card[] getPlayerHandArray() {
        return playerHandArray;
    }

    public Card[] getPlayerDeckArray() {
        return playerDeckArray;
    }

    public void newDeck(Card[] newPickupDeck){this.playerDeckArray = newPickupDeck; }

    //Following code checks if a player has won
    public boolean checkWin() {
        boolean playerWin = true;
        //Gathers together card values
        int[] cardNumbers = new int[4];
        for (int eachCard = 0; eachCard < playerHandArray.length; eachCard++) {
            cardNumbers[eachCard] = playerHandArray[eachCard].getIndexValue();
        }

        //Checking if the card values are the same
        int comparisonValue = cardNumbers[0];
        for (int eachValue = 1; eachValue < cardNumbers.length; eachValue++) {
            if (comparisonValue != cardNumbers[eachValue]) {
                playerWin = false;
                break;
            }
        }
        return playerWin;
    }

    public boolean isCardPlayerNumber(){
        Card[] playerHandArray = getPlayerHandArray();
        int count = 0;
        for (int j = 0; j < playerHandArray.length; j++) {
            if(playerHandArray[j].getIndexValue() == playerNumber){
                count ++;
            }
        }
        if(count >= 1) {
            for (int g = 0; g < playerHandArray.length; g++) {
                if (playerHandArray[g].getIndexValue() == playerNumber) {
                    playerHandArray[g].setToKeep();
                } else {
                    playerHandArray[g].setToDiscard();
                }
            }
            return true;
        }
        return false;
    }

    public void discard(){
        Card[] playerHandArray = getPlayerHandArray();
        int[] tempArray = new int[4];
        for (int i = 0; i < playerHandArray.length; i++) {
            tempArray[i] = playerHandArray[i].getIndexValue();
        }
        Arrays.sort(tempArray);

        int moreVal = 1;
        int tempValue;
        int winingVal = tempArray[0];
        int count = 0;
        for (int i = 0; i < (tempArray.length); i++) {
            count = 1;
            tempValue = tempArray[i];

            for (int j = i+1; j < tempArray.length; j++) {
                int againstVal = tempArray[j];
                if (tempValue == againstVal) {
                    count++;
                }
            }if(count > moreVal) {
                winingVal = playerHandArray[i].getIndexValue();
                moreVal = count;
            }

        }

        if(moreVal > 1 ) {
            for (int i = 0; i < playerHandArray.length; i++) {
                if (winingVal == playerHandArray[i].getIndexValue()) {
                    playerHandArray[i].setToKeep();
                } else {
                    playerHandArray[i].setToDiscard();
                }
            }
        }else{
            for (int i = 0; i < playerHandArray.length; i++) {
                    playerHandArray[i].setToDiscard();
                }
            }
        }

    public int findIndex(){
        ArrayList removeIndexes = new ArrayList();
        ArrayList removePriorityIndex = new ArrayList();
        for (int i = 0; i < playerHandArray.length; i++) {
            if(playerHandArray[i].getDiscard() == true){
                if(playerHandArray[i].getTimeStep() > 2){ ///  3 ?
                    removePriorityIndex.add(i);
                }else {
                    removeIndexes.add(i);
                }
            }
        }

        Random rand = new Random();
        int randomIndexToRemove = 0;
        int index = 0;
        if(removePriorityIndex.size() > 0){
            randomIndexToRemove = rand.nextInt(removePriorityIndex.size());
            index = (int) removePriorityIndex.get(randomIndexToRemove);
        }else {
            randomIndexToRemove = rand.nextInt(removeIndexes.size());
            index = (int) removeIndexes.get(randomIndexToRemove);
        }
        return index;
    }

}

